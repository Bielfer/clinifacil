datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.MediumText
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role?
  doctor        Doctor?
  receptionist  Receptionist?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Patient {
  id           Int           @id @default(autoincrement())
  name         String
  birthDate    DateTime?
  sex          Sex?
  cpf          String?       @unique
  email        String?
  cellphone    String?
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@fulltext([name, cpf])
  @@fulltext([name])
  @@fulltext([cpf])
}

model Doctor {
  id               Int               @id @default(autoincrement())
  name             String
  cpf              String
  crm              String
  email            String?
  cellphone        String?
  city             String
  receptionists    Receptionist[]
  handbooks        Handbook[]
  appointments     Appointment[]
  appointmentTypes AppointmentType[]
  printables       Printable[]
  user             User?             @relation(fields: [userId], references: [id])
  userId           String?           @unique
  medications      Medication[]
  exams            Exam[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt()
}

model Receptionist {
  id        Int      @id @default(autoincrement())
  name      String
  doctors   Doctor[]
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Handbook {
  id            Int             @id @default(autoincrement())
  title         String
  fields        HandbookField[]
  doctors       Doctor[]
  appointment   Appointment?    @relation(fields: [appointmentId], references: [id])
  appointmentId Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt()

  @@index([appointmentId])
}

model HandbookField {
  id           Int                   @id @default(autoincrement())
  label        String?
  type         HandbookFieldType
  handbook     Handbook?             @relation(fields: [handbookId], references: [id])
  handbookId   Int?
  required     Boolean               @default(false)
  displayOrder Int                   @default(0)
  print        Boolean               @default(false)
  options      HandbookFieldOption[]
  value        Json?
  formatters   Json?

  @@index([handbookId])
}

model HandbookFieldOption {
  id              Int            @id @default(autoincrement())
  text            String
  value           String
  handbookField   HandbookField? @relation(fields: [handbookFieldId], references: [id])
  handbookFieldId Int?

  @@index([handbookFieldId])
}

model Appointment {
  id              Int               @id @default(autoincrement())
  status          AppointmentStatus @default(OPEN)
  patient         Patient           @relation(fields: [patientId], references: [id])
  patientId       Int
  doctor          Doctor            @relation(fields: [doctorId], references: [id])
  doctorId        Int
  type            AppointmentType   @relation(fields: [typeId], references: [id])
  typeId          Int               @unique
  displayOrder    Int               @default(0)
  handbooks       Handbook[]
  doctorNotes     DoctorNote[]
  prescriptions   Prescription[]
  exams           Exam[]
  realizationDate DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt()

  @@index([patientId])
  @@index([doctorId])
  @@index([typeId])
}

model AppointmentType {
  id          Int          @id @default(autoincrement())
  name        String
  price       Int?
  appointment Appointment?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()
  doctor      Doctor?      @relation(fields: [doctorId], references: [id])
  doctorId    Int?

  @@index([doctorId])
}

model DoctorNote {
  id            Int         @id @default(autoincrement())
  message       String      @db.Text
  startDate     DateTime
  duration      Int
  cid           String?
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt()

  @@index([appointmentId])
}

model Medication {
  id        Int      @id @default(autoincrement())
  name      String
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([doctorId])
}

model Prescription {
  id             Int         @id @default(autoincrement())
  medicationName String
  boxAmount      Int
  instructions   String
  appointment    Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId  Int
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt()

  @@index([appointmentId])
}

model Printable {
  id            Int           @id @default(autoincrement())
  name          String
  type          PrintableType
  backgroundUrl String?
  footer        Boolean       @default(false)
  displayName   Boolean       @default(false)
  translateX    Int           @default(0)
  translateY    Int           @default(0)
  doctor        Doctor        @relation(fields: [doctorId], references: [id])
  doctorId      Int

  @@index([doctorId])
}

model Exam {
  id            Int          @id @default(autoincrement())
  name          String
  doctor        Doctor?      @relation(fields: [doctorId], references: [id])
  doctorId      Int?
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  appointmentId Int?
  favorite      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt()

  @@index([doctorId])
  @@index([appointmentId])
}

enum Role {
  MASTER
  ADMIN
  DOCTOR
  RECEPTIONIST
}

enum Sex {
  Masculino
  Feminino
}

enum HandbookFieldType {
  TEXT
  AUTOCOMPLETE
  CHECK
  TEXTAREA
  DATE
  TABLE
  ADD
}

enum AppointmentStatus {
  OPEN
  FINISHED
  ARCHIVED
}

enum PrintableType {
  DOCTOR_NOTE
  PRESCRIPTION
  EXAMS
  HANDBOOK
}
